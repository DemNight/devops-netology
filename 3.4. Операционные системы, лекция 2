1) На лекции мы познакомились с node_exporter. В демонстрации его исполняемый файл запускался в background. Этого достаточно для демо, но не для настоящей production-системы, где процессы должны находиться под внешним управлением. Используя знания из лекции по systemd, создайте самостоятельно простой unit-файл для node_exporter:

поместите его в автозагрузку,
предусмотрите возможность добавления опций к запускаемому процессу через внешний файл (посмотрите, например, на systemctl cat cron),
удостоверьтесь, что с помощью systemctl процесс корректно стартует, завершается, а после перезагрузки автоматически поднимается.

```
vagrant@vagrant:/etc/systemd/system$ ps -e |grep node_exporter  
  12594 ?        00:00:00 node_exporter
vagrant@vagrant:/etc/systemd/system$ systemctl stop node_exporter
==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===
Authentication is required to stop 'node_exporter.service'.
Authenticating as: vagrant,,, (vagrant)
Password: 
==== AUTHENTICATION COMPLETE ===
vagrant@vagrant:/etc/systemd/system$ ps -e |grep node_exporter  
vagrant@vagrant:/etc/systemd/system$ systemctl start node_exporter
==== AUTHENTICATING FOR org.freedesktop.systemd1.manage-units ===
Authentication is required to start 'node_exporter.service'.
Authenticating as: vagrant,,, (vagrant)
Password: 
==== AUTHENTICATION COMPLETE ===
vagrant@vagrant:/etc/systemd/system$ ps -e |grep node_exporter  
  12707 ?        00:00:00 node_exporter

Сервис:
vagrant@vagrant:/etc/systemd/system$ cat /etc/systemd/system/node_exporter.service
[Unit]
Description=Node Exporter
Wants=network-online.target
After=network-online.target

[Service]
User=vagrant
Group=vagrant
Type=simple
ExecStart=/usr/local/bin/node_exporter
EnvironmentFile=/etc/default/node_exporter

[Install]
WantedBy=multi-user.target

Переменная окружения
vagrant@vagrant:/etc/default$ sudo cat /proc/12914/environ 
LANG=en_US.UTF-8LANGUAGE=en_US:PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/binHOME=/home/vagrantLOGNAME=vagrantUSER=vagrantSHELL=/bin/bashINVOCATION_ID=2076e5eb3c64480985a09438e92520ebJOURNAL_STREAM=9:41650vagrant@vagrant:/etc/default$ 

(исправления\дополнения)

(при помощи чата и гугла)

указываю в отдельном файле требуемые переменные. добавляю файлик в автозапуск (тогда система грузит доп параметры из файла)

[Service]
EnvironmentFile=-/etc/default/cron
ExecStart=/usr/sbin/cron -f $EXTRA_OPTS


```

2) Ознакомьтесь с опциями node_exporter и выводом /metrics по-умолчанию. Приведите несколько опций, которые вы бы выбрали для базового мониторинга хоста по CPU, памяти, диску и сети.

```
node_cpu_seconds_total{cpu="0",mode="idle"} 3251.81
node_cpu_seconds_total{cpu="0",mode="iowait"} 5.96

node_disk_io_time_seconds_total{device="dm-0"} 54.424
node_disk_io_time_seconds_total{device="dm-1"} 0.46
node_disk_io_time_seconds_total{device="sda"} 55.58

node_disk_read_bytes_total{device="dm-0"} 3.5654144e+08
node_disk_read_bytes_total{device="dm-1"} 3.342336e+06
node_disk_read_bytes_total{device="sda"} 3.70340864e+08

node_disk_read_time_seconds_total{device="dm-0"} 44.212
node_disk_read_time_seconds_total{device="dm-1"} 0.452
node_disk_read_time_seconds_total{device="sda"} 29.505

node_memory_MemTotal_bytes 1.028694016e+09

node_network_receive_drop_total{device="eth0"} 0
node_network_receive_drop_total{device="lo"} 0

node_network_receive_errs_total{device="eth0"} 0
node_network_receive_errs_total{device="lo"} 0
```

3) Установите в свою виртуальную машину Netdata. Воспользуйтесь готовыми пакетами для установки (sudo apt install -y netdata). После успешной установки:
в конфигурационном файле /etc/netdata/netdata.conf в секции [web] замените значение с localhost на bind to = 0.0.0.0,
добавьте в Vagrantfile проброс порта Netdata на свой локальный компьютер и сделайте vagrant reload: config.vm.network "forwarded_port", guest: 19999, host: 19999 
После успешной перезагрузки в браузере на своем ПК (не в виртуальной машине) вы должны суметь зайти на localhost:19999. 
Ознакомьтесь с метриками, которые по умолчанию собираются Netdata и с комментариями, которые даны к этим метрикам.
```
vagrant@vagrant:~$ sudo lsof -i :19999
COMMAND PID    USER   FD   TYPE DEVICE SIZE/OFF NODE NAME
netdata 966 netdata    4u  IPv4  24764      0t0  TCP *:19999 (LISTEN)
netdata 966 netdata   20u  IPv4  28980      0t0  TCP vagrant:19999->_gateway:50500 (ESTABLISHED)
netdata 966 netdata   24u  IPv4  29978      0t0  TCP vagrant:19999->_gateway:50499 (ESTABLISHED)
netdata 966 netdata   31u  IPv4  29980      0t0  TCP vagrant:19999->_gateway:50501 (ESTABLISHED)
netdata 966 netdata   38u  IPv4  28982      0t0  TCP vagrant:19999->_gateway:50505 (ESTABLISHED)
netdata 966 netdata   51u  IPv4  28984      0t0  TCP vagrant:19999->_gateway:50506 (ESTABLISHED)
netdata 966 netdata   52u  IPv4  28986      0t0  TCP vagrant:19999->_gateway:50511 (ESTABLISHED)

(добавлен скриншот)

```

4) Можно ли по выводу dmesg понять, осознает ли ОС, что загружена не на настоящем оборудовании, а на системе виртуализации?

```
Да, система сообщает что виртуализована

vagrant@vagrant:~$ dmesg |grep virt
[    0.004281] CPU MTRRs all blank - virtualized system.
[    0.141868] Booting paravirtualized kernel on KVM
[    3.307809] systemd[1]: Detected virtualization oracle.
```

5)Как настроен sysctl fs.nr_open на системе по-умолчанию? Узнайте, что означает этот параметр. Какой другой существующий лимит не позволит достичь такого числа (ulimit --help)?

```
vagrant@vagrant:~$ sysctl -n fs.nr_open
1048576
Лимит на максимальное количество открытых дискрипторов (ulimit -n)
```

6) Запустите любой долгоживущий процесс (не ls, который отработает мгновенно, а, например, sleep 1h) в отдельном неймспейсе процессов; покажите, что ваш процесс работает под PID 1 через nsenter. Для простоты работайте в данном задании под root (sudo -i). Под обычным пользователем требуются дополнительные опции (--map-root-user) и т.д.
```
(исправлено)

терминал 1
vagrant@vagrant:~$ sudo -i unshare -f --pid --mount-proc sleep 1h

Терминал 2
vagrant@vagrant:~$ ps -e |grep sleep
2267 pts/0    00:00:00 sleep
root@vagrant:/# nsenter --target 2267 --mount --pid ps aux
USER         PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root           1  0.0  0.0   8076   592 pts/0    S+   09:51   0:00 sleep 1h
root           3  0.0  0.3  11492  3384 pts/1    R+   09:53   0:00 ps aux
```
7) Найдите информацию о том, что такое :(){ :|:& };:. Запустите эту команду в своей виртуальной машине Vagrant с Ubuntu 20.04 (это важно, поведение в других ОС не проверялось). Некоторое время все будет "плохо", после чего (минуты) – ОС должна стабилизироваться. Вызов dmesg расскажет, какой механизм помог автоматической стабилизации. Как настроен этот механизм по-умолчанию, и как изменить число процессов, которое можно создать в сессии?

```
"В действительности эта команда является логической бомбой. Она оперирует определением функции с именем ‘:‘, которая вызывает сама себя дважды: один раз на переднем плане и один раз в фоне. Она продолжает своё выполнение снова и снова, пока система не зависнет." (c)

(исправления\дополнения)

Существует ограничение на количество процессов одного пользователя, судя по всему, при привышении лимита контроллер заблокировал выполнение команды (не дал создать больше процессов)

dmesg выводит:
[ 1292.599507] cgroup: fork rejected by pids controller in /user.slice/user-1000.slice/session-3.scope
[ 1308.267364] cgroup: fork rejected by pids controller in /user.slice/user-1000.slice/session-5.scope

исходя из этого, можно установить(снизить) лимит для пользователя командой ulimit -u (либо, добавлением в файл конфигурации, для работы на постоянной основе)

```
